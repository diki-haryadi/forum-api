FROM nginx:alpine

# Install certbot and dependencies
RUN apk add --no-cache certbot certbot-nginx bash curl

# Create necessary directories
RUN mkdir -p /etc/nginx/ssl /var/www/certbot

# Copy configuration files
COPY nginx.conf /etc/nginx/nginx.conf
COPY docker-entrypoint.sh /

# Create improved entrypoint script
RUN cat > /docker-entrypoint.sh << 'EOF'
#!/bin/bash
set -e

# Default to production, allow override with environment variable
CERTBOT_ENVIRONMENT=${CERTBOT_ENVIRONMENT:-"production"}
DOMAIN=${DOMAIN:-"forum-api.haryadi.my.id"}
CERTBOT_EMAIL=${CERTBOT_EMAIL:-"your@email.com"}
FORCE_RENEWAL=${FORCE_RENEWAL:-"false"}

# Check if certificates already exist
if [ ! -d "/etc/letsencrypt/live/$DOMAIN" ] || [ "$FORCE_RENEWAL" = "true" ]; then
  echo "Requesting certificate for $DOMAIN"
  
  # Use staging or production based on environment variable
  if [ "$CERTBOT_ENVIRONMENT" = "staging" ]; then
    echo "Using Let's Encrypt staging environment"
    certbot_args="--staging"
  else
    certbot_args=""
  fi
  
  # Try to get the certificate
  certbot certonly --webroot --webroot-path=/var/www/certbot \
    $certbot_args \
    --email $CERTBOT_EMAIL \
    --agree-tos \
    --no-eff-email \
    -d $DOMAIN || true
fi

# Check if we actually have certificates and copy them if they exist
if [ -d "/etc/letsencrypt/live/$DOMAIN" ]; then
  echo "Certificate obtained successfully"
  cp /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/nginx/ssl/fullchain.pem || echo "Warning: Could not copy fullchain.pem"
  cp /etc/letsencrypt/live/$DOMAIN/privkey.pem /etc/nginx/ssl/privkey.pem || echo "Warning: Could not copy privkey.pem"
else
  echo "Certificate not available. Creating self-signed certificate as fallback."
  # Generate a self-signed certificate as fallback
  mkdir -p /etc/nginx/ssl
  openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout /etc/nginx/ssl/privkey.pem \
    -out /etc/nginx/ssl/fullchain.pem \
    -subj "/CN=$DOMAIN" || echo "Failed to create self-signed certificate"
fi

# Start Nginx
echo "Starting Nginx..."
exec nginx -g "daemon off;"
EOF

# Make entrypoint script executable
RUN chmod +x /docker-entrypoint.sh

# Install openssl for self-signed certificate fallback
RUN apk add --no-cache openssl

# Expose ports
EXPOSE 80
EXPOSE 443

# Use custom entrypoint script
ENTRYPOINT ["/docker-entrypoint.sh"]